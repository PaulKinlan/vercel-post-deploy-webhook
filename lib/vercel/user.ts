/** @module user */
// Auto-generated, edits will be overwritten
import * as gateway from './gateway'

/**
 * Retrieves a list of "events" generated by the User on Vercel. Events are generated when the User performs a particular action, such as logging in, creating a deployment, and joining a Team (just to name a few). When the `teamId` parameter is supplied, then the events that are returned will be in relation to the Team that was specified.
 * 
 * @param {object} options Optional options
 * @param {number} [options.limit] Maximum number of items which may be returned.
 * @param {string} [options.since] Timestamp to only include items created since then.
 * @param {string} [options.until] Timestamp to only include items created until then.
 * @param {string} [options.types] Comma-delimited list of event \"types\" to filter the results by.
 * @param {string} [options.userId] When retrieving events for a Team, the `userId` parameter may be specified to filter events generated by a specific member of the Team.
 * @param {string} [options.teamId] The Team identifier or slug to perform the request on behalf of.
 * @return {Promise<object>} Successful response.
 */
export function listUserEvents(options?: ListUserEventsOptions): Promise<api.Response<any>> {
  if (!options) options = {}
  const parameters: api.OperationParamGroups = {
    query: {
      limit: options.limit,
      since: options.since,
      until: options.until,
      types: options.types,
      userId: options.userId,
      teamId: options.teamId
    }
  }
  return gateway.request(listUserEventsOperation, parameters)
}

/**
 * Initiates the deletion process for the currently authenticated User, by sending a deletion confirmation email. The email contains a link that the user needs to visit in order to proceed with the deletion process.
 */
export function requestDelete(): Promise<api.Response<any>> {
  return gateway.request(requestDeleteOperation)
}

/**
 * Retrieves information related to the currently authenticated User.
 */
export function getAuthUser(): Promise<api.Response<any>> {
  return gateway.request(getAuthUserOperation)
}

export interface ListUserEventsOptions {
  /**
   * Maximum number of items which may be returned.
   */
  limit?: number
  /**
   * Timestamp to only include items created since then.
   */
  since?: string
  /**
   * Timestamp to only include items created until then.
   */
  until?: string
  /**
   * Comma-delimited list of event \"types\" to filter the results by.
   */
  types?: string
  /**
   * When retrieving events for a Team, the `userId` parameter may be specified to filter events generated by a specific member of the Team.
   */
  userId?: string
  /**
   * The Team identifier or slug to perform the request on behalf of.
   */
  teamId?: string
}

const listUserEventsOperation: api.OperationInfo = {
  path: '/v3/events',
  method: 'get',
  security: [
    {
      id: 'bearerToken'
    }
  ]
}

const requestDeleteOperation: api.OperationInfo = {
  path: '/v1/user',
  method: 'delete',
  security: [
    {
      id: 'bearerToken'
    }
  ]
}

const getAuthUserOperation: api.OperationInfo = {
  path: '/v2/user',
  method: 'get',
  security: [
    {
      id: 'bearerToken'
    }
  ]
}
